/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.cvut.lhotamir.mwlcollection.client;

import cz.cvut.lhotamir.mwlcollection.messages.*;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Calendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Tharadalf
 */
public class GUIClient extends javax.swing.JFrame {

    /**
     * Creates new form GUIClient
     */
    public GUIClient() {
        initComponents();
        fc = new JFileChooser();
        socket = new Socket();
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (socket.isConnected()) {
                    try {
                        out.writeObject(new ClientQuitMessage());
                        in.close();
                        out.close();
                        socket.close();
                    } catch (IOException ex) {
                        Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        stateButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        readNodesButton = new javax.swing.JButton();
        readLinksButton = new javax.swing.JButton();
        readRecordsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        stopServerItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        addNodesItem = new javax.swing.JMenuItem();
        addLinksItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MWLCollection");

        stateButton.setText("Get Collection State");
        stateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start Collection");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop Collection");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        readNodesButton.setText("Read Nodes");
        readNodesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readNodesButtonActionPerformed(evt);
            }
        });

        readLinksButton.setText("Read Links");
        readLinksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readLinksButtonActionPerformed(evt);
            }
        });

        readRecordsButton.setText("Read Records");
        readRecordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readRecordsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(readRecordsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readLinksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readNodesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(readNodesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(readLinksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(readRecordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("File");

        connectItem.setText("Connect");
        connectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectItemActionPerformed(evt);
            }
        });
        jMenu1.add(connectItem);
        jMenu1.add(jSeparator1);

        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitItem);

        stopServerItem.setText("Stop server and quit");
        stopServerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerItemActionPerformed(evt);
            }
        });
        jMenu1.add(stopServerItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        addNodesItem.setText("Add Nodes");
        addNodesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodesItemActionPerformed(evt);
            }
        });
        jMenu2.add(addNodesItem);

        addLinksItem.setText("Add Links");
        addLinksItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinksItemActionPerformed(evt);
            }
        });
        jMenu2.add(addLinksItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1)
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectItemActionPerformed
        // TODO add your handling code here:
        String dialogue[], address;
        int port;
        dialogue = JOptionPane.showInputDialog(this, "Enter IP address and port number in this format \"192.168.0.1:3999\"").split(":");

        try {
            address = dialogue[0];
            port = Integer.parseInt(dialogue[1]);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Wrong input format", null, JOptionPane.ERROR_MESSAGE);
            return;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Wrong input format", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            socket.connect(new InetSocketAddress(address, port), 2000);
            out = new ObjectOutputStream(socket.getOutputStream());
            in = new ObjectInputStream(socket.getInputStream());
            writeMessage("Successfuly connected to:"+socket.getInetAddress());
        } catch (UnknownHostException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Could not find host.", null, JOptionPane.ERROR_MESSAGE);
            
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }//GEN-LAST:event_connectItemActionPerformed

    private void stateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateButtonActionPerformed
        if (socket.isConnected()) {
            try {
                StateMessage reply;
                out.writeObject(new StateMessage());

                reply = (StateMessage) in.readObject();
                if (reply.isRunning()) {
                    writeMessage("Collection is running.");
                } else {
                    writeMessage("Collection is not running right now.");
                }
            } catch (IOException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            notConnectedAnnounce();
        }
    }//GEN-LAST:event_stateButtonActionPerformed
    private void notConnectedAnnounce() {
        JOptionPane.showMessageDialog(this, "Not connected to the server!", null, JOptionPane.ERROR_MESSAGE);
    }

    private void writeMessage(String message) {


        try {
            jTextArea1.getDocument().insertString(0, "[" + Calendar.getInstance().getTime() + "] - " + message + System.getProperty("line.separator"), null);
            jTextArea1.setCaretPosition(0);
        } catch (BadLocationException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        if (socket.isConnected()) {
            try {
                out.writeObject(new ClientQuitMessage());
                in.close();
                out.close();
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (socket.isConnected()) {
            try {
                out.writeObject(new StartMessage());
                Message reply = (Message) in.readObject();
                if (reply.getCode() == 3) {
                    writeMessage("Collection successfuly started.");
                }
                if (reply.getCode() == 4) {
                    writeMessage("Collection already running.");
                }
            } catch (IOException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            notConnectedAnnounce();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (socket.isConnected()) {
            writeMessage("Please wait for collection to stop...");
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                out.writeObject(new StopMessage());
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Message reply = (Message) in.readObject();
                if (reply.getCode() == 5) {
                    writeMessage("Collection successfuly stopped.");
                }
                if (reply.getCode() == 6) {
                    writeMessage("Collection is not running right now.");
                }
                this.setCursor(Cursor.getDefaultCursor());
            } catch (IOException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            notConnectedAnnounce();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void readNodesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readNodesButtonActionPerformed
        if (!socket.isConnected()) {
            notConnectedAnnounce();
            return;
        }
        int res = fc.showSaveDialog(this);
        if (res == 1) {
            return;
        }

        if (fc.getSelectedFile().exists()) {
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to overwrite this file?", "Warning", JOptionPane.YES_NO_OPTION);
            if (response == 1 || response == -1) {
                return;
            }
        }
        writeMessage("Reading nodes from database...");
        try {
            out.writeObject(new ReadNodesMessage());
            Scanner scan = new Scanner(in);
            String reply = scan.nextLine();
            PrintStream ps = new PrintStream(fc.getSelectedFile());
            while (!"end".equals(reply)) {
                ps.println(reply);
                reply = scan.nextLine();
            }
            ps.close();
            writeMessage("Reading complete..");
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readNodesButtonActionPerformed

    private void addNodesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodesItemActionPerformed
        if (!socket.isConnected()) {
            notConnectedAnnounce();
            return;
        }
        int res = fc.showOpenDialog(this);
        if (res == 1) {
            return;
        }
        try {
            out.writeObject(new StateMessage());
            StateMessage reply = (StateMessage) in.readObject();
            if (reply.isRunning()) {
                writeMessage("Cannot add nodes - collection running.");
                return;
            }
            Scanner scan = new Scanner(fc.getSelectedFile());
            String line;
            PrintStream ps = new PrintStream(out);
            out.writeObject(new AddNodesMessage());
            while (scan.hasNextLine()) {
                line = scan.nextLine();
                ps.println(line);
                System.out.println(line);
            }
            ps.println("end");
            ps.flush();
            scan.close();
            AddNodesMessage nodesAdded = (AddNodesMessage) in.readObject();
            writeMessage(nodesAdded.getAdded() + " links added.");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_addNodesItemActionPerformed

    private void addLinksItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLinksItemActionPerformed
        if (!socket.isConnected()) {
            notConnectedAnnounce();
            return;
        }
        int res = fc.showOpenDialog(this);
        if (res == 1) {
            return;
        }
        try {
            out.writeObject(new StateMessage());
            StateMessage reply = (StateMessage) in.readObject();
            if (reply.isRunning()) {
                writeMessage("Cannot add links - collection running.");
                return;
            }
            Scanner scan = new Scanner(fc.getSelectedFile());
            String line;
            PrintStream ps = new PrintStream(out);
            out.writeObject(new AddNodesMessage());
            while (scan.hasNextLine()) {
                line = scan.nextLine();
                ps.println(line);
                System.out.println(line);
            }
            ps.println("end");
            ps.flush();
            scan.close();
            AddLinksMessage linksAdded = (AddLinksMessage) in.readObject();
            writeMessage(linksAdded.getAdded() + " links added.");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addLinksItemActionPerformed

    private void readLinksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readLinksButtonActionPerformed
        if (!socket.isConnected()) {
            notConnectedAnnounce();
            return;
        }
        int res = fc.showSaveDialog(this);
        if (res == 1) {
            return;
        }

        if (fc.getSelectedFile().exists()) {
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to overwrite this file?", "Warning", JOptionPane.YES_NO_OPTION);
            if (response == 1 || response == -1) {
                return;
            }
        }
        writeMessage("Reading links from database...");
        try {
            out.writeObject(new ReadLinksMessage());
            Scanner scan = new Scanner(in);
            String reply = scan.nextLine();
            PrintStream ps = new PrintStream(fc.getSelectedFile());
            while (!"end".equals(reply)) {
                ps.println(reply);
                reply = scan.nextLine();
            }
            ps.close();
            writeMessage("Reading complete.");
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readLinksButtonActionPerformed

    private void readRecordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readRecordsButtonActionPerformed
        if (!socket.isConnected()) {
            notConnectedAnnounce();
            return;
        }
        int res = fc.showSaveDialog(this);
        if (res == 1) {
            return;
        }

        if (fc.getSelectedFile().exists()) {
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to overwrite this file?", "Warning", JOptionPane.YES_NO_OPTION);
            if (response == 1 || response == -1) {
                return;
            }
        }

        String dialogue[], fromNodeName, toNodeName, to, from;

        dialogue = JOptionPane.showInputDialog(this, "Enter demanded link and time inerval in this format \n \"NEAR NODE NAME;FAR NODE NAME;YEAR-MONTH-DAY HOURS:MINUTES;YEAR-MONTH-DAY HOURS:MINUTES\"").split(";");

        try {
            fromNodeName = dialogue[0];
            toNodeName = dialogue[1];
            from = dialogue[2];
            to = dialogue[3];
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Wrong input format", null, JOptionPane.ERROR_MESSAGE);
            return;
        }
        writeMessage("Reading records from database...");
        try {
            out.writeObject(new ReadRecordsMessage(to, from, fromNodeName, toNodeName));
            Scanner scan = new Scanner(in);
            String reply = scan.nextLine();
            PrintStream ps = new PrintStream(fc.getSelectedFile());
            while (!"end".equals(reply)) {
                ps.println(reply);
                reply = scan.nextLine();
            }
            ps.close();
            writeMessage("Reading complete.");
        } catch (IOException ex) {
            Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readRecordsButtonActionPerformed

    private void stopServerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerItemActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to stop the server and quit?", "Warning", JOptionPane.YES_NO_OPTION);
        if (response == 1 || response == -1) {
            return;
        }

        if (socket.isConnected()) {
            try {
                out.writeObject(new ServerStopMessage());
                in.close();
                out.close();
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(GUIClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_stopServerItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIClient().setVisible(true);
            }
        });
    }
    private Socket socket;
    private ObjectInputStream in;
    private ObjectOutputStream out;
    final private JFileChooser fc;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addLinksItem;
    private javax.swing.JMenuItem addNodesItem;
    private javax.swing.JMenuItem connectItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JButton readLinksButton;
    private javax.swing.JButton readNodesButton;
    private javax.swing.JButton readRecordsButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stateButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JMenuItem stopServerItem;
    // End of variables declaration//GEN-END:variables
}
